package cloudflarereverse

import (
	"fmt"
	fp "github.com/0xF7A4C6/fingerprint-client/fingerprintclient"
	"testing"
)

func TestGetCfbm(t *testing.T) {
	brFp, err := fp.LoadFingerprint(&fp.LoadingConfig{
		FilePath: "./fp.json",
	})

	if err != nil {
		panic(err)
	}

	type args struct {
		brFp  *fp.Fingerprint
		proxy string
	}
	tests := []struct {
		name    string
		args    args
		want    string
		wantErr bool
	}{
		// TODO: Add test cases.
		{
			args: args{
				brFp:  brFp,
				proxy: "http://cap1217:gLAty@172.252.8.224:61234",
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := GetCfbm(tt.args.brFp, tt.args.proxy)
			if (err != nil) != tt.wantErr {
				t.Errorf("GetCfbm() error = %v, wantErr %v", err, tt.wantErr)
				return
			}

			fmt.Println(got)
		})
	}
}

func Test_encryptFp(t *testing.T) {
	type args struct {
		password string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		// TODO: Add test cases.
		{
			name: "encrypt-fp-test",
			want: "SkCIh9OGhpC9wM39i4M4$IdaCCbdwIOwaOj41fCMK4s49aRCEK4j4MJd51wE7046MYRr4mMTIrEl4hI3KDM4OYw4Wvwh1MSvyxBGinyLpc4Vxac04KtUNpaVJ8jIO+UbWSsU$fPojk0oVJd9sskZ4TzQCza4o49mJI4u6I9RyvrwgZalc044Rva4gM9rz4Ib4Kw4vZNC4Edr+jVy49dw4KC4cvICoah88d7rMNIf5Tf7XGKf9zmC6afy91FC-24qSNtS951YV3z$99CVw0ingvZvFEvI43VMCCfbGE4bMaO9+btXDfn3gUJo278PacImDearJrabVc4EMGva4KV-ycCuUXopFu3I44liz0XUpgir56zJfOCrV5-RB6psyNe6a4iDCr4bZtB1bJMrzX9laON53X3DkEwaxZxFcnOOe6M24OlIXcrYxNiR4Eb$UIKDJ3D7zX9ugBcttmgSZUcla411+y2IT4ORV9KM9aMO0g0w43qHtKvChJoqHL$8ThDUhByK8xIg704dVkk5Q0mPzzvyVmR9uiaTjEH94rpZdQxr24x9f2ezM4nPNxdxsbDMdiZHm+7cjX195G-S0lzILydgUz0$4hRakwYfCy0U7MKTQqzpjwpWbKgsWHTd8X-r7ryXoISbOq1OHKSc9NPc+bjzd7pMyWM7pRF4m5Blh1jDwo3bXMBluRFkIOQ-O$OC7rfEGN443bu0GgI2Mab6T1rJDrNTg9vSCaIw7OcIO3vsHwMaVhESCjh35OWU0Et74kpwjOTSCyIlOIJt0hZyOb3bBw0CtyieXys3K4rYIKDyM4Cj1EwwWta0uRw74f1ZE3IMIYh3E3HEr6dDxvyyY4C9wMhK6YZs8aIqXEzWusrUIagUd8TMKa4ftW7ZGuYWsr24DvT3CW4c7Ilk1p$UyDbdcvl4VzMdjrM3V2Mg0tuM9TTGxUgTDTWVTK8Uxmcxg06YQ$amMIlTTTJWEU4766DGY37xbxn2JNaSZvExI2xbk9O6L7O2ZKaqD0KtsMoyfOTw31JIVOSTJV3IJIRzS0TwCtBcczwW4KDHMrMNTcaTjrUa0jrNTBXxivM7rEX1UCY7ooo79-ywkmgaCVV1ZyEYbOnfOppaD4TzwvgruwK2LyGsJlSqT74irFN4$hw1oyhHMDMq79CihYOIJaXrRUdWivjrjCpzv9mb2C32kJbBZ3QGdSvJrISDO8Lhlh6o1CaBYKlzvIKKCShMnyBa8XGkwLcCfMMMyadN0+h2wT+CCJIz$7IutaMakPhI60B3vIlhnSgcJwZLnzaa01SCQiNFnu1KSXdR1VGGXbvMg3jZXghndvFlurHE5344gvvSllXl4ZLNX7nayBleDPEUapCkgIUEgagdqhpoKzJI8KGVfO9J8kLWxaHM4JszGH+7gX1x2mG9Ch+ceg9gVrEsTmM$yj7D4-coSm8pGTD-6BSUbV9DqdDoWr5BSh8-+oT7axsTHsfuhi-CqjqaoGcp$8QSJr+6nOTGVk8sCtlyB03mQgqDoHrmMkktCkzpJ0Jlh1jcEGaJtx4V9IJJk4MmGtB6JsHjO04344yN6vvjp4hDzeIbM+4vyCcjK2JRr7wuwfz82QgILTvkkXParKoMUR9itMNv4M6DM90ETzdId4Oswyhvd3Crxv$3N4l0btahtx9q6GCRdS18sk4OcNMv8c33brZ3-SdOF6vTaztMakti9vuLyt80aFxVTU4zt4OY9Iswx9KU14bkVYgBE6UOxbLTdg5aggWxwH1ghB41Nw4eyrnKEMx3$W86z$S5VE4R5ktp4tNgmaSwrid6OnpXVlMaQd9fktVjCvrd4W4Kv9OcOaKUsHGxY3avo3ic0q6Vjz3vDpMUigVjGTCQYWM0jVM14Fu9+xhD7SPnCeVSa+E4-keJZYyGg4OBa2cDwwB0dD3pbripGtP3wDwKhbiHMjCjKGdne8$i8ZxBQY8eVD4J+0TbGG0t4f8zK5mxtdYWysCTOEhGVHCHIgojfz$0C7hN30McvbuiihlMfSQaCttCzNOlCwDTdIWtvx8xO2lgHf6dO8zi5kvOFM7OZiwh3oYmKRxTKV6gEMKav73lbggbIt98s3nT5WCYoUjFTLd2c9mKIchcMkzilwTg0jU9IRrcrfOyh1sdTVNM19d2aRtwV1aTXUhmZvzwhQtnL8Rg0LPaOrha3zc7pw91aIOd8R7awZmdM+pDjbLcip0nU4ZnvpC1JV3V9iVznGGQtgOV5foMazZJoE8T93DTUaPxMbOLBvV4Ux7kbk5$YCD9aHmpc5gbZkG0GTm6B6Fr9wwUk-FCvsFWdgIbtt1jyJsWHv0JkdjWCTrDfqdCz4FTrVwSkb2h1gx9I4FkjmI9zLEngtsCvTesChSXptJva4WXDnv8WNpm7x6DnHrNOrCw4IlaUhVzwdrpb1JvKlz+l1tqj9zcuDJKwOM7w0MdOr9EECWd2wY8+cBShdV19vgJyjaGSJVrOW9iqOQXqKyVmn3PohDC4hVdTyl9JjwTvCYrba53WJtnITIhI+wrkY3pTbFaE8MYVOJx3hIH3fYIKFWw3nx+1hvf1NcfwVvUfgEKITokMyRU+4kSrdnxVPhjSb5$eN7Gr6U4OSlbkByPhU9nw0FkJID6bIMYj6rJIdrgBUOiWCf71xD73K8GYo08IRp-yGbKf0L6dZbtpbrf79ydMsspGWytRcOn8mFTwncxnn7+zuZggHIYkvGmvDGY0-bcJIFE4br8dJjwJH7c8F2NjUOkLrNSxVE0f4ybvW0$8MjPfgbsd9eY70BZvL10CtpkXp2cJvo$pKHgqNiJlgxNNXg62gIQU15HUI+2YVxlBSZjgGXVfS3qdtDC6wBfRpOgyp158mn34N$GdmfOWjW9N+f1JLOYpMUb1GKOZ-NFFel-p5FO-m9UTatMz+EYVJNUrXoZ+nNahDf19RgFXm0moLXvnwno8PTD9Ni7SFt8xnOzphulR+OUWvNPRveiyILpvmoTM8qV8h-5V4CpxU11FKk+b8XEEWyHztzpKaTrB35UutwDV2Is90h3qdm8EEn50bKQV+lpMB1btlPY+gXsd1twV9kKyuDIczh38$BhfcPv4Ou9K9v4uyfFK0ukdvrq7iremr7vefoT11vyj4b-7TWBrLtL-leZPk6O$rfnFWo1kF0v-K15aVOSkFfXVViuTkmFg$kNhnd3OtOu81CugIiD6U4G5MOCQtU0vE85ogCPgYgHEmspEVsK6hXzqIKCz4OM$ox85OuXFw-QcGSZX75ieeBk2$LQxJ07l6-2lLFTZPTLKItL5gMEUacwggpuJe5UCNKKkMUS4B+l3sJJUGxO4$DyuB5$X3QB+pJv4yaDpjVJJhI3IGrNO40s391lqhRPqqc7UEo+hxXB$EqKSCWFnQq$E88vPZroP2IatLVPxPQSfhL+6HP+Y0u04M39ek36arDaPH4E+keizXzYI3IO-+Ek04j8rEZOS40WCM-kukrEI3LkZ+bEkECD33p9Jd94DkvDkMPVNBF6TD33T+XjTkkDKEm0lE+HS4oF5++kGMj4VOaUEy$3yVQUsaph93$CUDkYMUCUTDwDs8dH-H1kIbKE+knWmj93NjaX0DcEZ4Jhe8Pw$M8M4j+98MJhZY0O$3J4l4VO9O$E-tpEm3pCUU8EXk3y$EZ474u39YQau3Md1wuMv9RU8EzW$3jyT9tVZOtDqjyDvOdhyErrdETOtEYt$Elt9VYMaa4ON8ipytl90WrvIuyONRtp4pDwK$t8OOOQQp4O3DQylRtoDlIg3vI64eO6yztttLQQQz46w2$YI+y4Vgy03CvlmeOG9r$eOQJV3tlTVevRyRtWa7lhy2yDO5mjtcVfyHICpF3TVvzCIeOo83RccdyZVYOQQyVCIXaevotRtxV3k4atV4cOVoVBV40gICk6V3RZ9YV0mHVHIG4FwwpkvtVGlj4aTa9tVLvTdj4jVWVoQZznKeO+aVO$djQMlBvpbCkJOpdQQYmOu1OicRG-cb8UQdtciJQ5kPvB4EQ7d5kj3URq3IDkOalf1+4W$XrbDszaQEd2dS3544IUzEddR6vRKC4EdMRlc2lEdmlowVDkY6aXr60X3+3+d0Yp4my8iJ8YIpYXrWywI0YIKvyfiy4EdyYK0SIEdozTp8DEd30ciQvw8tp2UMaMaD4tcTGxJYYP1nTSl5NzvMa5YDIBO3T80zl+dBtXrfzGazZbWGITWSt0JIKVKyGXc59bd3WzldV-$ZWGIjRYYBtPieTOWzl0dtmkYBtWWSZmlHWFtVRRN3k0J4cRrsuxGYYY4qyzQmlWl+dEW+tjm6lQaGwDR+Wj48RRRLWj4xwCHkYMrci9tY4DY9vc$vH$H9QUHR$iy932l60mp+4RHfl8pjmOHUpIUEkiZQHS0gtyvHUC4s0I1h$8WMrUIVJvJZa+4s04upaGJsmsHTk64p8+0y4WHO3KzV4fIEHhvEkbMfIN4TTV3T3O38D4Jx4akDN$Vazx3f3aQoRhu0uRMHWOM08clU4pQ8MDJ+4YMbrGQ9Hk87MXYeWSIqMoWMHy4qMXwDJzloMpQnyj4qyxM5MoyO3XMC4qM8aHGxM0JxMLUccBWbpd3smDce$2WY45WFMLUzQ0xKy5QRm8VJGUxgQTk68skhRxcOx6mJxZc60EMcI2MjmOx6073hp0uhxY0TD2$cICxXxswaRwUHMNx7xY047e$SZOxXw$KL47Txxe$p82ww7LUl7swmOqxLUjKFKdMLU6xEZqc8xZc8VJ7NchQjpOx6pJJRmBTH3Z3PJQxZ72ZRxmTMJQTR7e$Y7CDz7u72ZWWO7X7WWoMn7y7WWQux8DK-7s7w9kl8JS3JxsMGIIpevJfnxYd2USxzlkx6MLvImzvmUyrZfKHzNs8BYWxO3FToMVfPJDHz$dMWfdNoTrk+44iyrL4ETCx4igwtUtfSIXfg4Vu2ftUgYKkGkylmH6Yk8LfFTM7fu8DbSPJS4Xd2w5Th32lJSguYIcRL4VM3TiS-vtZsu0uJSaQQS74VML4QWC4tS+aN4YSQUj4j06J-WFR5f2YWSivEYclETdZi9OSivSZUvH3UITKTSSUIt3Tp4G4z481Q8H3b1C4DY1ynHuIPYRmQzoJ9Nxc9n4TUn8W$ly4uIoI+I$OQc+4RnFIwIOniciWBcNJFcj4EcynHy17KnV31DgpmMCnVIRrhzEwJGp4c$XK1lg34TQr-uy40iM4ozRS0Q2UvJs40v6SvJDJnSL43nd8N1nc64nnCohvWpN4L4L4+Z+4vJswWpml6dhNNaOoNoVrDSMoyo7oDI648bCSjmtoWpHYGKSoXoM4VYj4+avIv7skk8joe8aKmKbYzi74YzF3xRkqvqTkDV4mDvNJOof4lqBw9SBdC4KqhSGqVl2NUqCozqmqBwoRbIo8cIwN0qbIiq3qyqjwakHWNqRzTq5$ic1WOqSq6qGqNShngqGa2qJIFfFTuq7q+qcqM4MfzHwhnq3hNH0SSZLqBqFHMrrhh4fqbh0Kh7boxqchThsqBwi$c$zhphnqyh+qM3GTyId1TkfoWh8b6w244hzvkqvmBxY4+xs8fqjhm7smLymuYImlLhPyEfOoey-$4gwgYI54VKEVOoZGIl5qGgW4KH8aZaiyBoBI+xrgCoqpBn0u3N8IMrFTN4UcRrGxfz2lQgRgY4SM7yZq1gtgMu$3$QPJVgMOFVIqqgfNfg6g9HJUOpEgvNhggY5g9Q$hsg0RBwV4vhogI62gFodYogL0lmNJdoh3zaRDklPSL3OoCV+ZEgdpIJ6he3t6IKGnONBo03$aMgUaIc6w60ioZ1Oos8NUF3zl3Tz4B6fUR33$qn66cI6426oIv$HfqnsmD4EGfVHGkMTKzvkBOCuQjC4QBc+4GB6a9B6Ix46o2UcB7TGfN11B$KuBk8cBldcIozpzzBEG5TVmtJRm8tyrxBTwNmtJQdgIqBlB7BroC4GB6mVBEGMaBw$OGTPoEBokBwHBl3gBzif4SgRDGBJj74ljQv4j3v9DeBXa9jUj$3zj8jD4eMjKq4J6GBujvIUBclVjeMozv6yjEGQJxjtZMBy4GBN7Qvk$KVGjnjCUgcgj-BEGL7jmX30TETSZzY$c6jF3b82BFDFVXr39Kcy7KtU33TJX-VJR6jdtFVX7mkp42QHdiXDXcXy7mXRX-ozBOXCIX7nTUIJIVJG393UXWXSlZX2Z7XSXyct1QXuZwccjfmWXmJ$azZIKhzT6kh6na6NMIQQXN$ovhv6vnKWXpzNJKhQXYX8XZJGRkhR3ZHQX8FZFiHlhDq0KV4DFiF83DFWXUK1KzvLzFGUOSFpvh4E1qFsvCddOBFO9GNLV2U+FZvbotZYzoF30FGjFdxhF6Fa+Q9LFL4Xrx$a9hn5FaN5TKiVu9+dxcmU8y4c+tJT9kIIIZ+3+C+m+wIR+SZN+6fanclW+Ji4tf4Y+O+EFL4xgxf5JmbB3YN$TQ+r+h+4Z+4W+0Z1hC4W+RZFRo+2+2v1deVSFXaM14z$q-Fa+JUv$poI+KCQzsUihPFf4jC4u2FxcSF7X7OWVQEaKyIzEWEIav$4OFFa+kwO$4yfEKCkwVQEwWDyDzE6Enp8Ej4RZiyhEEEMpfzGEuESEJrLpPpoqh3FEeETCkMjH8I4JSdNJ+EKsrKqvBwWpwyJsH1q3F3j49sX4isv1DgIkL4EVisjC7lcyJsmETkN4Hs4uXrqsTkKC6syIOtvECsCus8ZJF3O$KkisGWasSISFkwLcb8Jsb2-piviszN74Xytuc9isRn1tyECszgMrQszVEsgERwX+VJakZ2UsJsCppGZ2is5vGdm2kwG4Kk0MCI1qeEvGLEc2gEZlD3ln9Vj2jshEouP3$S52g3GTVrzEWcXyTmzEI2zE1+8GIEa+J-64wEzMa2L+G-4TakWca-MrzEc4ZUm-qqB2m29JHqu-vs$YSFk76X0yhEf+rnz-KCS-n+alo-iEhEnc4v3E$EKC82r2a+--wE91swh4pNX-4aF94TzE6+xvj+8i++gIo-IXnOD-7NzE5+s+4ZzESFD556N2s-KDD5JKyyhEP+wEwzD5CkfzcaD5yoK3nVj2G41VE-rsKCIddTllN-hEj51565s5j-o5bdEuPJy2o5fzx2s-rERzo-kLfZ6-s+Bz-ENbFWl-KC+a7Ej2qZ6ioFF3suDF3TQJlzyJm6Z+OJOLQqIEdn$+HLnT$K21TuJV+I7LMOsmoLwIxN7gL+m53flm2n6SZ9KkHg916wswqZ4adfjm73pORD4QTfZ+XnLBbeyGJni$nOpfL+R$lNgJgiRLpeBwDeKjH8o9cez$8eSJf4P86dz+a1IEdsEVdipGL+QGtJReRLZh8Tx+jebTuZY+mbVv4Bkm+JZJORpjbe-eca7hPeIJk8CpWIwPeelz4P+a0lBqL+VNFs3XfF4vOuJox8JGmYkWZ+lcox-FOPGIShIEvsChWPTzOiHGswCxwzfPvziZ3ZfDiPTzKzGzXPMXlzDIY+S6vmylbeDYX9ashDTkuZ+psI3MPFgbg4YPKeIv4lY34B8Bv19YdJaXPyUD$4W7KH37bskCwU4fpOyhMiuInZxcd4ut4b9iym4s5zIN9UjjjS3On4RcK8xpwJ9UwfBblL4hOjlhZOpX6INrduiGqrcli6+dBi8wK9UwWWKh9YM3DICYOSZDaUHEvDQyyN0LWCzv9wMsOzu4IBaanVx+rOa3k8z20rKaEql-GxXzrD8BnbKaENdIXMOETKEm4DDaI65xazwhIWhwoQ7rukS1gb$LOaJErui-p4bOB4eIviYnahHCHattJGCa33h8UvmU04t2IId49sVVJaaXrx$i93t904Nan+ZnsbOW9cCak7COJTQBn4iIXr4wyTK5BLoVCcm9uLr0cDGxkCPSOIh1DjBxhZts4OeDvCc3XkZt5T2I9hEeCH9ztmlEgYg9O0mlZtqa8fYFv8374$Ccay9DZ3P6ghK174Upj63Xkj9xt64MbNGMThX9jKYezbTptZM+9hts820tKzmD5CF4Rr-V5l5I0E9FtDrVDSKSDM8v9C3rgkuGdiDW4tiKH2mOGEEzur9tZapGt1aO32OjaJUppSZOmBa0Tt9vj0OlZjrUCsITIqIMwgkhZSSD1CLI42ZbHT4o0xR7HsaS70LSRO7CwvN$iJz30BlKFyi9HOkVtwLbqZGRDE934sv+cy46v7P9r0$gu4L2haM8OC3mO+KcIFvuXVE4$lDDgi40Rr473T49z4QUcLSUC4KSjCKzypSaDgtG4I3Bv3Uwp1vh1y4bUIWTTpdIVN0wCKCGrSG4ncYvD4fnNJepjy3tn8pFw$rz-r00D0+yHIpmR1sqEmg-Z0MMzMcCw4OgVbCvppS8KUXu0sy74GK2Yv6M1YsyXwiKaDjz4CghuC43KolyK8cr9VRwHfOM0K9hyqCitK0S8zwWqrlVqwBsZP2BMygDVYI-Mz631tVniiObHxzUxrXMk9VqYGREj4ZaooFiPwwVSUtUU3WHUvk8x3IDRXryvmnwXzSldlhQ0CN3xjK7RdbOyvkwLReUMtDK3n0wCRkv-jD5oVdOaJGl3$WRCWpryvt24FPsbyuVUS61gZeKNa4P3kh745npIjHZ7Ee050LkP$7aM$i0g3p3wHTU2Bq3-a+wiwl2K8izcC6cTi3Hnz8fnbk9$VwRS9bprrvNhFNR3kf3aEv9GMR9SIK02wU00UOkZx3PeSb2VWoJjURquqd2iwZK6pdB3RDj-6yXl4cdUej9KNf7giOv1Uc619S7CsCG4m+ZohzdKiyPhzdm4e$v5svhzUX$YCq0yIOsbKVhwMwv7E56d3cafdDjowj73SIdd7zhS2hDYjIVI6eKOCJ0yIEKv9O8p6qDiu8aWM16bp-E1DCY5kvb4edIdu05xUGxfxaYC4SUuMKrbBvwYgMobR1g0sfMf0zc3vxwJ0sO9L33TSUN7Vp0ql4YZ2GNCCa9xSHgdD470M+hTs8UHrQhDadF0cs9wpYJz1cuxCpvYxUyCUKcyI3bO$4Yu4TxxwsgTvh6C8xcCpUf58v$k4YkoMFCVU9xQUBtUv8pyGhXdBUaYZh4zFzCmv1Wc4YTXpT$tHWcU9VTWbZzFJ1ZngK9lu7i7W5GxiUK4Obrd9dC9y0Jfw2L9zhFMKY8GtbrJS8FVOlOeakky4a7h1EbOaywbYR341ghsY9OdmFToHRr3tv$y4i7Vj93CD+ErB5k-$bmdqxIHht8tkvQD7e9wOob9$O34ZaNstvn9zGjpSrETKgjyvYzLrdIyaEU3S4ZW8anhYa3nyVatveKSw0qxM6zaNWy44N2pEWZGo1WSI3gsc5b41tYpDT2ZurEHX3VMWQRoI4QsVa3yhwwzSNywDo8v4EuRr6+4Qshkjxm4IJ911YDGihaOv33CIdYEd0qdm4+wUijzioZ1OjC6IoI15IoXuiyUicMUOisT4NoXbSIa17X3naIV8CzfK704hXaghbHe3am1r30dVT0$aIC-dqv0jdVlvwauD1e2b9wJI34OCndqxKh1i5cCZF8a2Sgi50LZYIFRgh5Qtri04qG0JvgKFzO4JWjGwDKdSosoBGmslvCjCUVBQO4IeGmrz3399hBF4DI5Doj2ThGoeCEkar4-yE4Qkaisw2t0kj$9XBqUY4EEMLS7gqK501bii4ezohFBF4O5arDvBkpEaPDLNCI1G9xxhb04CkzKG1t1h5fwWC+zl7Hd4hLiwCs$vcXrK4NeBkNWIyM03frVIjcTo3VR2Pjl6lObMhdFRvBZMBCz5HG9wD1drEEYBOG51jCWIc42TwYQ5eKfzN0Eh3j5HW9fCOaX0OT4FKz9mte5MWIT9C8f9JtU5fbN1OmMONjHlrRk7YTQMcnDr9IcC73OwIvK-T6cTv7y4GW74j4z0sV0$4bHJaOq5g37tuVfMDIS5hF3Qr8zN4c6MD2Yj$tObxMvI4V734eacqc4OxoIS39iC4ShzFVz5S3M3te6St03pDzB93O$k$V+0+07EjCXGyWlh0cCz-jtgu7ezFweiR3wKF6lI3enudyw4lTczfMTaeYR1E92s45MaJjVNsM$aOOPMclpCC89IgCC7CJaMOest+wzy+Mzbo8GF3XZ2YHISlWr9rDg0SOMwmbWNbJnyy1w$kRrz5CJEytcwO0dG+b11ObtX$NldpF+nl3dZjj1v2UQy7FhMzgjpJkkjILfZ149qJKZirVZa3QigzE$skM4atTfsF4BxM49HGahaEowiIfiwOdQEaUoIe0OiQy6GLpyPM6xji0IhlXjXc3D4LiXHe$cadPjNm2yDw3$Y64JiO8jmUMa5yvsdS3$UzVHyIi3hySJ7+S4Udd1Yhrcz4sLOnDCMUWRhFD8zxaG$L30Gq7xtzvODb9GD2BDI-KZajB5EUSOH0BN504lY6OGXgIOcExTVtl9GXVd1uMUdiL0hDaexo1ubEjDY6bo4IunTaEzL0hTYODbgTIOcnv2TtH7j4F+Xuf$6xxDIh8OOphEZ45Y-$lXaKtpYUHxY74lXu3yn4uwUXXMocI7FzVoNmcRuNaN7suIbOucTrxcsP48lqhQc27Kz+fF2J87KJ67RlQbtUc09htTYrigc9Gc62zYR3JkoSyYhyUXjgxeJTmh1t69hyKdycMfTKvniS4dQwGj95ZnT4H0gIciiBlHDL37cNYal8v9mRL3yWQp$YywDZ9eXiH27-lQbENxgV1YHIzGkIUNgPX+OKC3R3W73DsTiX0blYbKtjV64XXWfo1yioUD-NTj0bzzSMCo9s2dVVy18kZ30vph6c6W719zhuL5TQT3flcaPMgvp9MBPWNKQbD25ov6IZ4risqT53lgSzLYXUxKzbDOz4l4SurCh7OLP2hzHr$rMOe4yk0zXIJHLWh7IcStcXu3VJUIYtY64gIVGXckgbdi3hmwXI6k4lOX0ROr$pS3DzFCrvsdbk44TZTDD9UTWRMw05XpdQgc4O9sDCI1g41gbBsthBb6eHOZZ6fGKen59OBxWtBYnUzv3rzQg43aBrK-83SaJ4wviiaG74UITaMlyE4v9VZV2wmJGO1at4G44hWqxlfUvBWzWz7U6TcM3O+C2Ha90YhFBOYgQ2ZwLjtgFBPasC3TKdhTiwNUz4D-f2hdt34pHkn4kk91be6rbOB7v$3j9KMnGh8$z33TW7a+7EZwitrsmoa3C3nMQOT7Fh2BbbDk7g$HQIJDQ2hxT4WpP4QVEQdcsbhWr9n3TpQTahUFQhScsmyJSzzr0i0uNB9-B78jes465VJaCDyLh-py4fxNpa$ZkLv2ajJKT0Lo9sUl7iO8$Vu4GErE97OMrxgiyiKnL97xHsC70LQ0XONm5TPklxz99maXt2pSzhWM+2x2z-tjdl1fO2xbXjtGSqCemVyggE92gchD2gudGFm10ZqwI9vNI0vcjkHqbd$UiX2ClPa4iMnOfyy7I076ypwIN1X4EC4R9vJixM1aT6iSKy+vHMbkyTTpL9TwjV84P6$OmxyJjpTMIdhYCV9q9+$KxH5py01M4ZXV4dG0QC4Qc04mvaSdOFYUYKHynjTToJoS6OMkOuVyxKDY8lYE6T+4qIUDxKEpDnpmnSYRR00y9c0ORtO9L4oSyxhtiZ4CtzRcC5BTHas4fo$rO-eyEeVhjbSzbKmOG3nfRHjo2RbsTryVmRXbTLD3nGkyBTDre$Vuyw5W4eg18TrGusfy+c2TqWjn$rajW$nhydOHD8pwWwFhBm6iulqOKkwJEwtLqLQHoMK1yD8rOala-WKI1bBR4S+jW-wG9SC4IIMIFWNCpfYayB4MI4TOpz5z34m07WHD0rv50WUqs3yHDt1kkS3sG3yycxTbL10DBMJLvx7tD8v4OnBwccTrk8RGdFaL8S4VrcIF6RgDE9sc0SmDmDXLwows+lS0rqh2X5ZhVOF9TDbZMt38ybIr4TaUJjD4414DfaGweCEi3nhHOlafrzl4u4Fzq3Y7aINEx09UO-4Ea2U2UTXS5724JZPum4CSMq8ZOKVa3Majxnq3r+7nG8EczkL92raxRw1-I3wMxMFvch2RPhFxlw1jXHIIJNMxeRYOzC+Hkg1QurW1tbpUMuDBeok931bD048U4lDxYIgF0ICZ3prSahgZNwJnL$qhxEsTK3dqCIs69g+KrIpDobakDrDxny6EjobrtwIDxcU4wW3GHWu9CCyV6JODz2lJI3kFp+DE4IopNnzbeGKpriHW3oaobe$51E7hetgr8bE1O$UagvyRN5yxkmVEKk3Tu94gKfDzECWrdjmzvFbtWDO4-KWIDkoUOX$0gqtJwQ6d9SQf0wldFWEkpcSIxanyyXNw40Py+w0giGbw8cy91$OOT4z9QNkFnO+rNk8Du9CKo0ruIclVuTbrmaZSNKOT$ZcHoJFxahDHTv8YbiXhsCYE0bGczQdlsNS4qwZwVR7hYrTSEDdb-yqweq38KVB1vOl9RMwGHsFb-hf42f03FSgWc-hYzeRRh5It4$Qzrc8IDKc3WREvf64pkiYEItvOQzCylI1dC1JtD6nEkIrioXOmeWkCdm8$Nkelt04rkGIG3f0enr3ZFbtJFkJUumB$yjR5Vim5Ft1SQEfxPVfygx4Vv8XkCyrDpt9oCOlsMcv9fkkweo4ETv6FtPvQw90VFEt6$VytvzG1E4p16kYHuU3Fx1EE16JYB3rcuxKgI2VFtVr9wEqdpsjbouvCqw4w4+816yYkQWQ5IIi4hcFtXCBpo$iZqj64dYvfhdnS1sO6tYYJ8zoo1KsogYYYJQ21q1FEH60tkbTDp71tZOCg33GSudOpOZOCcYvK$kOJ+1Wj6R6KdU3Gc2kZKBM4KYLYDq6$kEg1g5rPNZ3xRE$nWWwOhxEZ-CVYry4vDCgvq91tdqCVcnta3ua5Dy6r89Plg3U1zE0n9HjK-mWeNJZiBiVaGmmtKTosNowK5PnUgj1eYuxhVZLuRg+YsCagJKbUOBtkakJXg-$nr$j9Y6Pafg0tI$$-xCOR9hhYH0101W95sO$BdJTrjZG6BrywgtdvC-mvBtEOVBY4KGd-Z+KPslSNLGhlueIIwzIjFT5afKb4R0ErjPJD$kwWa72ZgBeUt9Hcul1qjUxTaTBXB63ETITWmr4DlGDZjhSHIYsW04XVomlEBudRiI97Ea0fSgqcbWUSuc0OiECNzbFa$OWaRSO1j3MLMFttkRDDoh3HtakdWnWmEQgEMJCHXMW0U4+ogtIC$WMdxUNkgTdHUqU4TL1E+W$mrU-3WvOhyHIZxBNzjL+1-xojiyrif1h-SU2KgrRgUfWb+zQW$gWrawBWFUZNNQg$FDiQlYENqaHidTuvVHup1SDFjByQnjztk192Wj$xcGOJeGlm2fjIxswJC3$LDXNjmVmadWFBwFDxfyVgbiy5lLW2Dma95bk7FxyPcVou7tI5OpUl-wlXxVPUC1G3n4x+gxxqKFxGLU$sOj+VgtxdpQSyTQXqIGnsfpwLu4ZX87geayR$4LDt$IxLkVDGO5Ksejpxv7uxotS9U1X0dgkLeLUlws$8Txg3iYv3lVE+jpS3vrSo1LmHhwMdJvfdFywf2JXqdtpJieDNQ2V6+YQiQzpqSU2V6LYiiQzbhKP2Y6rWrUkco70Im76yfqzQzbfSZO-f87PU$Hv3nNZSx9SRi$gen1K2E6gdnCPhuVRFD5XiSBJHlGlL5NPXTxlZJpLDLkmOCMmZpH7b+jQZPfYSYJihbyRl-l7+SVvfDWgSXs+jBftK$goK9E+syfSglZZbwYU2KB$7QirPZ7-dZuQdycNHMxNLraUBrfmNfKCv-m2iBTxqaKTdJLY2f4nW$VLNGhHSsImpzwmmbEF1N21BYLaU8Wo7n7lCQg7ZNk+uE5rVyjynlGQ+pSRNECXynmG$+uxMXdRj87HG+Bpyly-uMV7iiJtGpLN2+j9oBaPEW-58ajBpoRr2OpqL1-OnqiY+W8hMlesyvbn-$H7a489Nrjytk$f2G4nDECj4xqzq2u3LDELFwM+hWSoifx-1+wfqr56GlRC2J+cocU+heUK$2lUf4aMp9wH6hGYoTaNuVGMN7$DtD4twy0FRul3TS+YIdlHQswLM8ef4$3-oTFW8XNTStM0kKPRwLBmTM8DnIP5Fefm3nlhncCCPuEEWTlaX450cw3I44O82QqBSWght7nKJNaB5Yiy24TlGRhmn7E+h0+TTYr1JM8L4IpOg4JlROBJRao34QaTaK4444C44M1QCQzc4$Eoa5O-ZMrG4OR5OfCBoIJ5kIFl44dyk1jMCIuGUrMPn$I3apwzC40hx931g3oQ4IEIP$05C$EQuNZCkOboHrQCM42Q-Zhx9k5xEQhsKopmCtG1uEehLlj4D04qj-+m9zk1bI49JqbDJM3DVSnhriygcIzbkr43OB3O4TaKbPzM15+TGhiV+0GXt24YDukGV$9yb9vwlavgHi5ynJGj-Uv86j3M4HIoG5GEthktmPhCor4zELQl4ha+webIDEBhftPjww4G5SELhPtkCQ3u0504kgvdqC+rui1UJ$gVyiwP0oc1trV4aYqwPKG380oxrb5zsDznk5nbyIzC1b+n0ZopC7r47OQ3I99wmCb9SlOCRYOvNi8spgqbf1MnbI$a+UrmMXdp-LqTEsqZ06PePR41mbCh-Q-0MMjKi2INChk9iDKeNImrVyIR9rvX8c+9nBBcC9nukMjJXIsKeMhN5RoFzN4zNezMIFOzP-N4nt535TuabTNXImaeH-10VhpsjyFb1Jdn4wM4RGr7rCH$4qW0I1hrNMvnOuZe9P-XIfr3xm4Mdok1r4QaU4zQMYGpImrUuwMqKivKI444V4l+pVnIJrUhYO7GMVG-00vFb1NBHT8xbt$+3R53Oz$jn+cEqwtcTa2eW330GI442i44",
			args: args{
				password: "4O9h3MDECdzjKS15ayU6T7N2bWpFGoueIt0gvxZswYcXlnRLrViBJfm-kH8+$qQPA",
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := encryptFp(tt.args.password)

			if got != tt.want {
				t.Errorf("encryptFp() = %v, want %v", got, tt.want)
			} else {
				fmt.Println(got)
			}
		})
	}
}
